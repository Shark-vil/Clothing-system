Для создания энтити одежды, нужно создать SH файл, который будет выполняться как на сервере, так и на клиенте. Проще всего создать такой файл в папке lua/autorun/.

## Описание обязательных параметров:
**Name** - название объекта _(Тип переменной - String)_

**Category** - категория объекта в меню спавна _(Тип переменной - String)_

**WireModel** - модель, которая будет отображаться на игроке _(Тип переменной - String)_

**FoldedModel** - модель, которая будет при спавне энтити _(Тип переменной - String)_

**PlayerBase** - база одежды _(Тип переменной - String)_

**BoneAttach** - использовать систему крепления к одной кости _(Тип переменной - Bool)_
* **AttachBoneType** - имя кости для крепления _(Тип переменной - String)_
* **AttachBoneScaleModel** - размер модели одежды/брони после крепления _(Тип переменной - Float)_
* **AttachX_pos** - Позиция по X, относительно центра кости _(Тип переменной - Float)_
* **AttachY_pos** - Позиция по Y, относительно центра кости _(Тип переменной - Float)_
* **AttachZ_pos** - Позиция по Z, относительно центра кости _(Тип переменной - Float)_
* **AttachX_rot** - Поворот по X, относительно центра кости _(Тип переменной - Float)_
* **AttachY_rot** - Поворот по Y, Относительно центра кости _(Тип переменной - Float)_

**BonemergeSystem** - использовать систему крепления ко всем костям игрока, если они совпадают _(Тип переменной - Bool)_

**TypePut** - Условные кости, которые должны быть закрыты при экипировке (Кости задаются в базе) _(Тип переменной - Array)_

## Описание второстепенных параметров:
**HideCharacterModel** - скрывать или не скрывать модель игрока при экипировке _(Тип переменной - Bool)_

**EnableSound** - включить или выключить пользовательские звуки _(Тип переменной - Bool)_
* **EquipSound** - звук при экипировке одежды _(Тип переменной - String или Array)_
* **UnEquipSound** - звук при снятии одежды _(Тип переменной - String или Array)_
* **WalkSound** - звук при ходьбе _(Тип переменной - String или Array)_
* **RunSound** - звук при беге _(Тип переменной - String или Array)_
* **JumpSound** - звук при прыжке _(Тип переменной - String или Array)_
* **LandingSound** - звук при касании с землёй после обычного прыжка _(Тип переменной - String или Array)_
* **PowerLandingSound** - звук при падении с большой высоты _(Тип переменной - String или Array)_
* **UnderWaterSound** - звук под водой _(Тип переменной - String или Array)_
* **AboveWaterSound** - звук над водой _(Тип переменной - String или Array)_
* **BreathSoundInGasMask** - звук дыхания в маске _(Тип переменной - String или Array)_
* **DamageSoundList** - звук при получении урона _(Тип переменной - String или Array)_
* **RicochetSoundList** - звук рикошета _(Тип переменной - String или Array)_

**TakeDamageSystem** - включить или выключить систему повреждений _(Тип переменной - Bool)_
* **TakesDamagePercent** - процент получения повреждений, в зависимости от типа урона _(Тип переменной - Array)_

**GasMask** - включить или выключить противогаз _(Тип переменной - Bool)_

**RegenerationHealth** - кол-во восстанавливаемого HP каждые 2 секунды _(Тип переменной - Integer)_

**Bodygroup** - установка бодигруппы для модели одежды _(Тип переменной - Array)_

**Skin** - установить скин для модели одежды _(Тип переменной - Integer)_

**Accessory** - использовать модель как аксессуар (В этом случае закрытие костей не происходит) или нет _(Тип переменной - Bool)_

**AdminOnlyDress** - могут ли надевать броню только админы _(Тип переменной - Bool)_

**GroupOnlyDress** - могут ли надевать броню только конкретные группы (Совместимо с ULX) _(Тип переменной - Bool)_

**GroupDressList** - список групп, которым доступна одежда _(Тип переменной - Array)_

### Функции:
**ItemSpawnSetParametrs = function(item)** - выполняется при спавне энтити одежды

**PlayerEquipItem = function (ply, class, item)** - выполняется перед тем, как игрок экипирует одежду

**PlayerDisconnected = function(ply, class)** - выполняется перед отключением игрока

**PlayerDropItem = function (ply, class, item)** - выполняется после выбрасывания одежды

### Пример содержимого файла:
```lua
list.Set( "clothing_system", "fg_pony_foe_security_armor", {
    Name = "FO:E - Pony Security Armor", -- Название
    Category = "Armor", -- Категория

    HideCharacterModel = true, -- Скрыть модель игрока при экипировке
    WireModel = "models/ppm/foe_fg_serv/stable_security_armor4.mdl", -- Модель одежды
    FoldedModel = "models/props_c17/SuitCase_Passenger_Physics.mdl", -- Модель Entity

    PlayerBase = "pony", -- База для одежды

    EnableSound = true, -- Включить собственные звуки
    EquipSound = "clothing_system/cs_equip.wav", -- Звук при надевании
    UnEquipSound = "clothing_system/cs_unequip.wav", -- Звук при снятии

    TakeDamageSystem = true, -- Использовать систему повреждений на броне
    TakesDamagePercent = {
        [DMG_BULLET]=.6, -- Урон от пули
        [DMG_SLASH]=.5, -- Урон от острых предметов, или NPC типа Manhacks
        [DMG_BURN]=.9, -- Урон от огня
        [DMG_BLAST]=.9, -- Урон от взрыва
        [DMG_CLUB]=.5, -- Урон от ломика
        [DMG_ENERGYBEAM]=.9, -- Урон от лазера
        [DMG_AIRBOAT]=.70, -- Повреждение от оружия Airboat
        [DMG_BUCKSHOT]=.7, -- Урон от дроби
    },

    BonemergeSystem = true, -- Использовать систему крепления Bonemerge (Надеть модель поверх основной)
    -- Условные кости, которые должны быть закрыты при экипировке (Кости задаются в базе)
    TypePut = {
        Chest = true, 
        BodyCenter = true, 
        FrontLeftHoof = true, 
        FontRightHoof = true, 
        RearLeftHoof = true,
        RearRightHoof = true, 
    },

    AdminOnlyDress = false, -- Могут ли надевать броню только админы

    GroupOnlyDress = false, -- Могут ли надевать броню только конкретные группы (Совместимо с ULX)
    GroupDressList = {
        "owner",
        "superadmin",
        "admin",
        "vip",
    },


    -- Only serverside --
    -- Пустой массив item["ItemArray"] создается при спавне энтити, и его можно использовать для сохранения параметров
    ItemSpawnSetParametrs = function(item)
        item["ItemArray"]["AddArmor"] = 50
    end,

    PlayerEquipItem = function (ply, class, item)
        local AddArmor

        if (item) then
            AddArmor = item["ItemArray"]["AddArmor"] || 0
        else
            if (ClothingSystem:GetSvData(ply, class, 'Armor')) then
                AddArmor = ClothingSystem:GetSvData(ply, class, 'Armor')
            else
                AddArmor = 0
            end
        end

        if ( (ply:Armor()+AddArmor) <= 255 ) then
            ply:SetArmor(ply:Armor()+AddArmor)
        else
            ply:SetArmor(255)
        end

        ClothingSystem:SaveSvData(ply, class, {['Armor'] = AddArmor})
    end,

    PlayerDisconnected = function(ply, class)
        local RemoveArmor = 50

        if ( (ply:Armor()-RemoveArmor) <= 0 ) then
            RemoveArmor = ply:Armor()
        end

        ClothingSystem:SaveSvData(ply, class, {['Armor'] = RemoveArmor})
    end,

    PlayerDropItem = function (ply, class, item)
        local RemoveArmor = 50

        if ( (ply:Armor()-RemoveArmor) >= 0 ) then
            ply:SetArmor(ply:Armor()-RemoveArmor)
        else
            RemoveArmor = ply:Armor()
            ply:SetArmor(0)
        end

        ClothingSystem:SaveSvData(ply, class, {['Armor'] = 0})

        item["ItemArray"]["AddArmor"] = RemoveArmor
    end,
} )
```